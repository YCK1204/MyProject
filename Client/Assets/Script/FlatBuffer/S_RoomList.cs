// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct S_RoomList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static S_RoomList GetRootAsS_RoomList(ByteBuffer _bb) { return GetRootAsS_RoomList(_bb, new S_RoomList()); }
  public static S_RoomList GetRootAsS_RoomList(ByteBuffer _bb, S_RoomList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_RoomList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RoomInfo? Rooms(int j) { int o = __p.__offset(4); return o != 0 ? (RoomInfo?)(new RoomInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RoomsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<S_RoomList> CreateS_RoomList(FlatBufferBuilder builder,
      VectorOffset roomsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    S_RoomList.AddRooms(builder, roomsOffset);
    return S_RoomList.EndS_RoomList(builder);
  }

  public static void StartS_RoomList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRooms(FlatBufferBuilder builder, VectorOffset roomsOffset) { builder.AddOffset(0, roomsOffset.Value, 0); }
  public static VectorOffset CreateRoomsVector(FlatBufferBuilder builder, Offset<RoomInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRoomsVectorBlock(FlatBufferBuilder builder, Offset<RoomInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoomsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<RoomInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoomsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<RoomInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRoomsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<S_RoomList> EndS_RoomList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<S_RoomList>(o);
  }
}


static public class S_RoomListVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Rooms*/, RoomInfoVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
