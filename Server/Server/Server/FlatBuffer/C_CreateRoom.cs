// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct C_CreateRoom : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static C_CreateRoom GetRootAsC_CreateRoom(ByteBuffer _bb) { return GetRootAsC_CreateRoom(_bb, new C_CreateRoom()); }
  public static C_CreateRoom GetRootAsC_CreateRoom(ByteBuffer _bb, C_CreateRoom obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public C_CreateRoom __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Password { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPasswordBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPasswordBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPasswordArray() { return __p.__vector_as_array<byte>(4); }
  public string RoomTitle { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoomTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRoomTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRoomTitleArray() { return __p.__vector_as_array<byte>(6); }
  public byte Theme { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<C_CreateRoom> CreateC_CreateRoom(FlatBufferBuilder builder,
      StringOffset passwordOffset = default(StringOffset),
      StringOffset room_titleOffset = default(StringOffset),
      byte theme = 0) {
    builder.StartTable(3);
    C_CreateRoom.AddRoomTitle(builder, room_titleOffset);
    C_CreateRoom.AddPassword(builder, passwordOffset);
    C_CreateRoom.AddTheme(builder, theme);
    return C_CreateRoom.EndC_CreateRoom(builder);
  }

  public static void StartC_CreateRoom(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPassword(FlatBufferBuilder builder, StringOffset passwordOffset) { builder.AddOffset(0, passwordOffset.Value, 0); }
  public static void AddRoomTitle(FlatBufferBuilder builder, StringOffset roomTitleOffset) { builder.AddOffset(1, roomTitleOffset.Value, 0); }
  public static void AddTheme(FlatBufferBuilder builder, byte theme) { builder.AddByte(2, theme, 0); }
  public static Offset<C_CreateRoom> EndC_CreateRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<C_CreateRoom>(o);
  }
}


static public class C_CreateRoomVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Password*/, false)
      && verifier.VerifyString(tablePos, 6 /*RoomTitle*/, false)
      && verifier.VerifyField(tablePos, 8 /*Theme*/, 1 /*byte*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
