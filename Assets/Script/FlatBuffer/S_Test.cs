// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct S_Test : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static S_Test GetRootAsS_Test(ByteBuffer _bb) { return GetRootAsS_Test(_bb, new S_Test()); }
  public static S_Test GetRootAsS_Test(ByteBuffer _bb, S_Test obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyS_Test(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, S_TestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_Test __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Test { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTestBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTestBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTestArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<S_Test> CreateS_Test(FlatBufferBuilder builder,
      StringOffset testOffset = default(StringOffset)) {
    builder.StartTable(1);
    S_Test.AddTest(builder, testOffset);
    return S_Test.EndS_Test(builder);
  }

  public static void StartS_Test(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTest(FlatBufferBuilder builder, StringOffset testOffset) { builder.AddOffset(0, testOffset.Value, 0); }
  public static Offset<S_Test> EndS_Test(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<S_Test>(o);
  }
  public static void FinishS_TestBuffer(FlatBufferBuilder builder, Offset<S_Test> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedS_TestBuffer(FlatBufferBuilder builder, Offset<S_Test> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class S_TestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Test*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
